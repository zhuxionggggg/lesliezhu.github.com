*** Common Lisp笔记二 : list操作

  List的三个基本操作函数:
  - cons : 将第一个参数作为第二个参数（list）的第一个元素
  - car  : 取list第一个元素
  - cdr  : 去list第一个元素之外的其它元素(以list形式)

  cons 真正所做的事情是，把两个对象结合成一个有两部分的对象，称之为 Cons 对象。
  概念上来说，一个 Cons 是一对指针；第一个是 car ，第二个是 cdr.

  *所有不是 Cons 对象的东西，就是一个原子 (atom)*.

  自定义listp: 判断是否cons对象使用consp
  #+begin_src lisp
  (defun our-listp (x)
     (or (null x) (consp x)))

  (defun our-atom (x) (not (consp x)))
  #+end_src

  - eql 只有在它的参数是相同对象时才返回真.
  - equal在它的参数打印出的值相同时返回真.
  - append将任意list拼接起来.

  加载一个lisp程序: *load*
  #+begin_src lisp
  (load "compress.lisp")
  #+end_src

  nth：获取第n个原子，n=0时是car
  #+begin_src lisp
  > (nth 0 '(a b c))
  A
  #+end_src

  nthcdr:获取第n个cdr
  #+begin_src lisp
  > (nthcdr 2 '(a b c))
  (C)
  #+end_src

  - zerop:判断是否是0
  - last: 返回列表的最后一个 Cons 对象
  - mapcar:接受一个函数以及一个或多个列表，并返回把函数应用至每个列表的元素的结果，直到有的列表没有元素为止
    #+begin_src lisp
    > (mapcar #'(lambda (x) (+ x 10))
          '(1 2 3))
    (11 12 13)

    > (mapcar #'list
          '(a b c)
          '(1 2 3 4))
    ((A 1) (B 2) (C 3))
    #+end_src
  - maplist:接受同样的参数，将列表的渐进的下一个 cdr 传入函数
    #+begin_src lisp
    > (maplist #'(lambda (x) x)
           '(a b c))
    ((A B C) (B C) (C))
    #+end_src

   一个copy-tree的实现:
    #+begin_src lisp
    (defun our-copy-tree (tr)
       (if (atom tr)
       tr
       (cons (our-copy-tree (car tr))
             (our-copy-tree (cdr tr)))))
    #+end_src
