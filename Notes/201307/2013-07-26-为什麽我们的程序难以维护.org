* 为什麽我们的程序难以维护(07/26/2013)

   我所在公司是一家数据决策服务公司，每个月都要为多家银行提供数据报告。这些数据报告主要是由Python程序生成，
   但核心是公司的引擎从数据库中获取查询结果，Python程序不过是一个文本处理的工作。随着时间的累积，这些Python程序也不断庞大，变的难以
   维护。

   一开始之所以选择Python生成报告，原因是当时负责人员选择了这门语言，它简洁、易读、易维护、灵活,并且Python生成Excel报告还是有很多
   开源软件包的.对于报告的需求也是不断变更的，时间也是很紧迫的，为了尽快做出一个demo给客户review，就没有太多考虑设计的问题。比如，
   是否应该使用类的方式，定义一些通用模块，使用类似MVC方法实现一个框架等等。 这些都没有，因为只有一个报告，当作是写一个脚本程序。

   程序从一开始就发育不良，后面的路注定会比较艰难。

   随着报告数量和种类的不断累加，报告数据之间存在某种联系，当我们对比的时候，才发现有很多不统一的地方。比如，本来应该相等的数据，由于
   取位方式不同而存在差异。报告的最终方式是Excel和PDF格式，PDF是使用Java程序生成的，报告存在三个格式TXT、XLS、PDF，格式不同的报告数据
   取位也存在差异。

   这时候我们开始构建专门用于生成报告的通用模块Report，定义了一系列报告中常用到的函数、变量等。但我们并没有完全推倒重来进行重构，因为
   重构的代价太大，不但需要花费大量的人力，还要不断测试和之前对比，毕竟我们已经生成了好几次报告了。

   这就是第一个问题所在，历史遗留问题成了所有问题的挡箭牌。只要想到程序已经工作了这么长时间，又何必动它呢，万一动错了谁负责呢？

   人人怕负责，这是第二个问题所在，发现问题的人当成麻烦制造者，这样的后果就是万马齐喑。
